1[sp](1) 工作区: 写代码的地方<br>(2) 暂存区: git中代码无法直接从工作区提交到仓库区,需要先从工作区添加到暂存区,然后才能从暂存区提交到仓库区,避免误操作<br>(3)仓库区: 将保存在暂存区域的内容永久转储到git仓库中,生成版本号[or]
2[sp]git init: 会在当前目录下生成一个隐藏文件夹.git[or]
3[sp]git add 文件名/目录名<br>* git add ./git add --all: 添加当前目录下所有的文件[or]
4[sp]git commit -m "提交说明"[or]
5[sp]git config --global user.name ye2k<br>git config --global user.email xxxxx@xxx.com[or]
6[sp]git status[or]
7[sp]git log/git log --oneline<br>git reflog可以查看所有版本的信息[or]
8[sp]git reset<br>git reset --hard 版本号[or]
9[sp]在仓库的根目录创建一个.gitignore的文件,将不需要别git管理的文件路径添加到.gitignore中[or]
10[sp]实质上时一个指针,每次提交代码后,这个分支指针就会向后移动,保证一直指向最后一次提交的版本.git中使用HEAD指向当前分支<br>* 各个分支之间不会相互影响[or]
11[sp]git branch 分支名称<br>* git在第一次提交时,就有了一个叫master的主分支[or]
12[sp]git branch<br>* 在当前分支前面会有一个*[or]
13[sp]git checkout 分支名称<br>* HEAD指针指向了另一个分支[or]
14[sp]git checkout -b 分支名称[or]
15[sp]git branch -d 分支名称<br>* 不能在当前分支删除当前分支,需要切换到其他分支才能删除[or]
16[sp]git merge 分支名称<br>* 将其他分支的内容合并到当前分支[or]
17[sp]合并分支时,如果出现冲突,只能手动处理,再次提交[or]
18[sp]git clone 远程仓库地址[or]
19[sp]git push 仓库地址 master[or]
20[sp]git pull: 获取远程仓库的更新,并且与本地的分支进行合并[or]
21[sp]git remote add 仓库别名 仓库地址<br>git remote remove 仓库别名<br>* git clone的仓库默认有一个origin的别名[or]
22[sp](1) 创建SSH Key: ssh-keygen -t rsa<br>(2) 在文件路径C:\用户\当前用户名\找到.ssh文件夹<br>(3) 文件夹中有私钥id_rsa和公钥: id_rsa.pub<br>(4) 在github => settings => SSH and GPG keys页面中,新创建SSH key<br>(5) 粘贴公钥内容到对应文本框中<br>(6) 此后使用SSH方式与github通信,不用再次输入密码[or]