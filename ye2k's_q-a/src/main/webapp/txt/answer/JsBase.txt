1[sp](1) 由数字/字母/_/$组成<br>(2) 不能以数字开头<br>(3) 严格区分大小写<br>(4) 不能是关键字[or]
2[sp](1) 数值类型(number):<br>[1] 浮点数不能用作比较,因为它不精确<br>(2) 字符串类型(string):<br>[1] 字符串有length属性,表示组成字符串的字符的个数<br>[2] 字符串可以用+号进行拼接<br>(3) 布尔类型(boolean):<br> [1] 只有两个值: true/false(区分大小写)<br>(4) 值未定义(undefined):<br>[1] 表示一个没有给出具体内容的值,即此处本应有值,但在程序中没有指明为什么值<br>[2] 任何刚声明的,从未赋值的变量的值都是undefined<br>(5) 空对象(null): 此处本应有对象,但是并没有得到它[or]
3[sp](1) \n: 换行<br>(2) \t: 制表符<br>(3) \\: 反斜杠本身<br>(4) \': 英文单引号<br>(5) \": 英文双引号[or]
4[sp]typeof xxx<br>* null的类型为object[or]
5[sp](1) 变量 + ""<br>(2) toString()<br>* null和undefined这两个值没有toString()方法,调用会报错<br>* Number类型的变量调用toString()方法时可以添加一个整数作为参数,会转换为指定的进制,默认为十进制<br>(3) String()函数<br>* 对于Number和Boolean类型的变量,实际就是调用toString()方法,对于undefined和null就直接转换为"undefined"和"null"[or]
6[sp](1) 使用Number()函数<br>[1] 字符串:<br><1> 如果是纯数字,直接转换为数字<2> 如果字符串中有非数字的内容,转换为NaN<br><3> 如果是一个空串或者是一个全是空格的字符串,转换为0<br>[2] 布尔:<br><1> true -> 1<br><2> false -> 0<br>[3] null: 0<br>[4] undefined: NaN<br>(2) parseInt(): 将字符串中的有效整数内容转为数字<br>[1] 只保留最开始的数字<br>[2] 对于非string类型,会先转换为string类型的数据再进行取值<br>[3] 带有两个参数时,第二个参数表示进制<br>(3) parseFloat() 同上,取浮点数<br>(4) 使用隐式转换或者一元运算符"+"和"-"[or]
7[sp]使用Boolean()函数(在做判断时经常是自动调用)<br>(1) 数字: 0和NaN为false,其余为true<br>(2) 字符串: 空串为false,其余为true<br>(3) null和undefined为false<br>(4) Object为true<br>* !!也可以转换为Boolean类型[or]
8[sp](1) 如果符号两侧都是字符串时,不会将他们转换为数字进行比较,会逐位比较他们的unicode编码<br>(2) 对于非数值(除(1)中情况外),会先转换为数值<br>(3) 任何值和NaN做任何比较都是false[or]
9[sp](1) 字面量: var arr = []<br>(2) 构造函数:<br>[1] var arr = new Array()<br>[2] var arr = new Array("a","b","c")<br>[3] var arr = new Array(123)[or]
10[sp]arr[数组下标] = 值<br>* 如果这个下标本身没有值,则添加新的元素,如果本身有值,则修改为这个元素的值<br>* 假设数组中原本只有3个元素,此时给arr[100]赋值,会开辟3-100这些位置的内存<br>* 如果想在数组最后一项后面添加元素->arr[length] = 值或arr.push(newValue)[or]
11[sp](1) 在代码开始执行之前,会把变量和函数的声明进行提升,但是不会提升变量赋值,也不会提升函数的调用<br>(2) 如果同时声明了多个同名变量,只会提升第一个声明,后面的声明会被忽略;如果同时声明了多个同名的函数,后面的函数会覆盖前面的<br>(3) 如果变量和函数名重名,会以函数名为准,但是如果最后该名称又接受了一个非函数的值,就又被改变为变量[or]
12[sp]采用沙箱模式,即匿名函数自调用[or]
14[sp](1) function 函数名(){}<br>(2) var 函数名 = function(){}[or]
15[sp](1) 点语法: 简洁,不支持变量<br>(2) 中括号语法: 将对象视为数组,对象的属性视为数组的下标,灵活,支持字符串和变量[or]
16[sp]for(var key in obj) { // key为属性,obj[key]为对应的值[or]
17[sp](1) 值类型: 在变量存储时,存储的是值本身;传参时,传递的是值本身<br>(2) 引用类型: 变量存储时,存储的是内存地址;传参时,传递的是内存地址[or]
18[sp](1) Math.PI: 圆周率<br>(2) Math.max(): 最大值<br>(3) Math.min(): 最小值<br>(4) Math.ceil(): 向上取整<br>(5) Math.floor(): 向下取整<br>(6) Math.round(): 四舍五入取整<br>(7) Math.random(): 随机数,[0,1)之间的一个数<br>(8) Math.abs(): 绝对值<br>(9) Math.pow(num,power): 次幂<br>(10) Math.sqrt(): 开方<br>[or]
19[sp]arr.join(分隔符): 将数组中每一项以分隔符连接拼成一个字符串,参数为空时,默认以逗号为分隔符<br>* 分隔符为空串时,相当于中间没有分隔符[or]
20[sp](1) arr.push(...): 在数组的最后添加一项或多项(以逗号分隔),返回添加后数组的长度<br>(2) arr.pop(): 在数组的最后删除一项,返回被删除的项<br>(3) arr.unshift(...): 在数组的最前添加一项或多项,返回添加后数组的长度<br>(4) arr.shift(): 在数组的最前删除一项,返回被删除的项[or]
21[sp](1) arr.reverse(): 使数组反转,会修改arr的内容<br>(2) arr.sort(sortBy) : 让数组排序<br>* 如果调用该方法时没有使用参数,将按照字母顺序对数组中的元素进行排序,即按照字符编码的顺序进行排序<br>* sortBy可以是个function,这样就可以自定义排序方法了[or]
22[sp](1) var newArr = arr.concat(arr2)<br>* 合并数组,不会改变原数组,会返回一个新的数组<br>(2) var new Arr = arr.slice()<br>* 从数组中截取一部分,不会改变原数组<br>* 不传参数: 从头截到尾,相当于赋值了一份原数组<br>* 传一个参数: 从传入的参数位置开始(包括自身)截取到最后<br>* 传两个参数: 从第一个参数开始截取到第二个参数的位置,包含第一个参数的位置,不包含第二个参数的位置[or]
23[sp]arr.splice(begin, deleteCount, item1, item2, ...): 会改变原数组<br>(1) begin: 从哪儿开始删除<br>(2) deleteCount: 删除几个<br>(3) item1: 添加的项1<br>(4) item2: 添加的项2[or]
24[sp](1) arr.indexOf(i): 查找i在数组中第一次出现的下标<br>(2) arr.lastIndexOf(i): 查找i在数组中最后一次出现的下标<br>* 如果不存在,返回-1<br> 如果有两个参数,第二个参数表示从第几个(包含第二个)元素开始找[or]
25[sp](1) arr = []<br>(2) arr.length = 0<br>(3) arr.splice(0, arr.length)[or]
26[sp]简单数据类型,是没有任何属性和方法的,为了方便操作基本数据类型,js提供了特殊的复杂类型-基本包装类型[or]
27[sp](1) Number: 数字<br>* num.toFiexd(n): 保留n位小数的字符串形式<br>* num.toString(n): 转换成n进制的数字后再转换成字符串<br>(2) Boolean: 布尔类型<br>* flag.toString(): 转换成字符串<br>(3) String: 字符串<br>[1] str[i]: 获取下标为0的字符<br>[2] str.index(a): 查找a在str中第一次出现的位置<br>[3] str.lastIndex(a): 查找a在str中最后一次出现的位置<br>[4] str.trim(): 去除str首尾的空格<br>[5] str.toUpperCase()/toLowerCase(): 转换成大/小写<br>[6] slice(begin, end): 从begin开始,截取到end(包含begin)<br>[7] subString(begin, end): 从begin开始,截取到end(包含begin)<br>[8] substr(begin, length): 从begin开始,截取length个<br>[9] str.split(分隔符,可以是正则): 从分隔符为界限将str分割成一个数组<br>[10] str.replace(s1, s2): 将str中的s1替换为s2<br>* /g表示替换所有<br>* /i表示忽略大小写[or]