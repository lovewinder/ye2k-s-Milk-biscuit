1[sp]Document Object Model: 文档对象模型是HTML和XML文档的编程接口,它提供了对文档的结构化的标书,并使程序可以对该结构及其各种属性进行访问,乃至改变结构或其属性以改变对应文档的结构或其属性,内容及样式,即文档被解析为一个由对象组成的结构系统[or]
2[sp](1)document: 浏览器会把每个文档以及其中所有的内容都解读成JS对象,整个文档被解析成document对象<br>(2) node: 网页中的所有内容都是节点(标签/属性/文本/注释等)<br>(3) element: 由HTML标签解析而得到的DOM对象统称为元素[or]
3[sp](1) 可以直接获取的DOM:<br>[1] <html>: document.documentElement<br>[2] <head>: document.head<br>[3] <body>: document.body<br>[4] <title>中的文本: document.title<br>(2) By获取:<br>[1] document.getElementById(...): 根据id或而去元素对象<br>* 如果元素不存在,返回null<br>* 如果有多个相同id的元素,只返回第一个<br>[2] document.getElementsByTagName(...): 根据标签名获取元素对象,返回伪数组<br>[3]document.getElementsByClassName(...): 根据类名获取元素对象,返回伪数组<br>* IE6,7,8不支持<br>[4] document.getElementsByName(...): 根据name获取元素,返回伪数组<br>(3) 根据css选择器获取:<br>[1] document.querySelector(...): 只会返回一个对象,如果有很多,会返回第一个<br>[2] document.querySelectorAll(...): 返回伪数组[or]
4[sp](1) 事件源: 事件目标,即事件发生的主体<br>(2) 事件类型: 发生了哪种事件<br>(3) 事件处理程序: 事件发生后执行的function[or]
5[sp](1) 获取: getAttribute(name)<br>(2) 设置: setAttribute(name,value)<br>(3) 移除: removeAttribute(name)[or]
6[sp](1)标签:<br>[1] innerText(): 只识别文本,带参数为设置,不带参数为获取<br>[2] innerHtml(): 识别html标签,带参数为设置,不带参数为获取<br>(2) 表单: value() 带参数为设置,不带参数为获取[or]
7[sp](1) Element.style.xxx: 修改行内样式<br>(2) className/classList: 类样式<br>[1] classList.add(): 添加类<br>[2] classList.remove(): 移除类<br>[3] classList.contains(): 判断是否包含某个类<br>[4] classList.toggle(): 切换类(有变无,无变有)[or]
8[sp](1) 孩子节点:<br>[1] childNodes: 获取所有的孩子节点<br>[2] children: 获取所有子元素<br>[3] firstChild: 第一个子节点<br>[4] firstElementChild: 第一个子元素<br>[5] lastChild: 最后一个节点<br>[6] lastElementChild: 最后一个子元素<br>(2) 兄弟节点:<br>[1] nextSibling: 下一个兄弟节点<br>[2] nextElementSibling: 下一个兄弟元素<br>[3] previousSilbling: 上一个兄弟节点<br>[4] previousElementSibling: 上一个兄弟元素<br>(3)<br>[1] parentNode: 父节点<br>[2] parentElement: 父元素[or]
9[sp](1) p.appendChild(c): 将孩子节点添加到父节点中的最后<br>* 剪切效果<br>(2) p.insertBefore(c,rc): 将子节点c添加到子节点rc之前<br>* 剪切效果[or]
10[sp]node.cloneNode(deep): 克隆节点<br>[1] deep = false时为浅克隆,只会复制标签/节点本身,不会复制其中的内容,为默认值<br>[2] deep = true时为深克隆,会复制其中的所有内容[or]
11[sp]p.removeChild(c)[or]
12[sp](1) document.write(): 基本不用<br>(2) innerHtml: 创建节点时,如果原来有内容,会把原来的内容删去,不建议使用<br>(3) createElement[or]
13[sp](1) on + 事件名称:<br>* 优点: 几乎所有的浏览器都支持<br>* 缺点: 同一个元素同一类型的事件,只能注册一个,如果注册了多个,会被之前的覆盖<br> (2) addEventListener(type, func, useCapture): 现代浏览器支持的注册事件的线方式,这种方式注册的事件不会出现覆盖问题<br>* type: 事件的类型<br>* func: 事件触发时执行的函数,如果想要移除,该函数不能是匿名函数<br>* useCapture: 是否使用捕获,默认为false,表示冒泡<br>(3) removeEventListen(type, func, useCapture): 移除事件绑定,用法同上[or]
14[sp]在触发某个事件的时候,都会产生一个事件对象Event,这个对象中包含所有与事件相关的一些信息,包括触发事件的元素,事件的类型以及其它与事件相关的信息<br>* 鼠标事件触发时,事件对象中会包含鼠标的位置信息<br>* 键盘事件触发时,事件对象中会包含按下的键相关的信息[or]
15[sp]在注册事件时的function()添加形参event,这个形参即为事件对象[or]
16[sp](1) 鼠标:<br>[1] screenX/screenY: 鼠标相对于屏幕左上角的水平位置和垂直位置<br>[2] clientX/clientY: 鼠标相对于可视区左上角的水平和垂直位置<br>[3] pageX/pageY: 鼠标相对于页面左上角的水平和垂直位置<br>(2) 键盘:<br>e.keyCode: 获取按下的键盘码[or]
17[sp]当一个元素的事件被触发时,同样的事件将会在该元素的所有祖先元素中依次被触发<br>* 从子到父触发[or]
18[sp]事件的处理将从DOM层次的根开始,而不是触发事件的目标元素开始<br>* 从根到子触发[or]
19[sp](1) 事件的捕获阶段<br>(2) 事件的目标阶段(被触发)<br>(3) 事件的冒泡阶段[or]
20[sp]e.stopPropagation()[or]
21[sp]e.preventDefault()<br>* return false :既可以阻止冒泡,也可以阻止浏览器默认行为,但是在addEventListener()中生效[or]
22[sp](1)鼠标:<br>[1] mousedown: 按下<br>[2] mouseup: 弹起<br>[3] click: 单击<br>[4] dbclick: 双击事件<br>[5] mouseover: 经过<br>[6] mouseout: 离开<br>[7] move: 移动<br>[8] focus: 获得焦点<br>[9] blur: 失去焦点<br>(2) 键盘:<br>[1] keydown: 按下时触发<br>[2] keyup: 弹起时触发<br>[3] keypress: 按下时触发(不会识别功能键)[or]
23[sp](1) offsetHeight/offsetWidth: 获取的是元素真实的高度和宽度,数值类型,只读<br>(2) offsetParent: 获取离当前元素最近的父系定位元素,如果没有找到,会找到body<br>(3) offsetLeft/offsetTop: 元素自身与offsetParent的左/上侧的真实距离,数值类型,只读[or]
24[sp]浏览器对象模型[or]
25[sp](1) window对象:<br>[1] window对象是一个全局对象,也就是JS中的顶级对象<br>[2] document/alert()/console.log()都是window的属性/方法<br>[3] 所有定义在全局作用域中的变量,函数都会变成window对象的方法和属性<br>[4] 调用window对象下的属性和方法调用的时候可以省略(2) location对象: 是window的一个属性,对应浏览器中的地址栏<br>[1] location.href = "http://www.baidu.com": 可以跳转页面<br>[2] location.reload(): 页面重新加载<br>(3)navigator: window的属性之一,可以获取客户端的一些信息<br>(4) history: 表示浏览器的历史记录<br>[1] history.back(): 回退<br>[2] history.forward(): 前进<br>[3] history.go(-n): 后退n步<br>[4] history.go(n): 前进n步[or]
26[sp](1) 延时器:<br>var id = setTimeOut(callback, time)<br>清除延时器:<br>clearTimeOut(id)<br>(2) 定时器:<br>var id = setInterval(callback,time)<br>清除定时器:<br>clearInterval(id)[or]
27[sp](1) 用来获取盒子内容的大小和位置<br>(2) 属性:<br>[1] scrollWidth: 盒子内容的真实宽度<br>[2] scrollHeight: 盒子内容的真实高度<br>[3] scrollTop: 用于获取内容垂直滚动的距离,如果没有滚动条,值为0<br>[4] scrollLeft: 用于获取内容水平滚动的距离,如果没有滚动条,值为0<br>(3) onscroll事件: 每次滚动条移动都会触发该事件[or]
28[sp](1) 用于获取盒子可视区的大小<br>(2) 属性:<br>[1] clientWidth: 获取内容宽度和左右padding的大小<br>[2] clientHeight: 获取内容高度和上下padding的大小<br>[3] clientTop: borderTop(css里设置上边框样式用的)<br>[4] clientLef: borderLeft<br>(3) onsize事件: 会在窗口被调整大小的时候发生[or]
29[sp](1) touchstart: 手指放到屏幕上时触发<br>(2) touchmove: 手指在屏幕上滑动时触发(会多次触发)<br>(3) touchend: 手指离开屏幕时触发<br>(4) touchcancel: 系统取消touch事件的时候,比如电话[or]
30[sp](1)e.touches: 当前屏幕上的手指<br>(2) e.targetTouches: 当前dom上的手指<br>(3) changedTouches: 触摸时发生改变的手指[or]
31[sp](1)clientX/clientY: 触摸点相对浏览器窗口的位置<br>(2) pageX/pageY: 触摸点相对于页面的位置[or]